brms
RTmodel3 <- brm(RT ~ stim_idx, data_or, family=shifted_lognormal())
library(brms)
RTmodel3 <- brm(RT ~ stim_idx, data_or, family=shifted_lognormal())
ggplot(data_or, aes(dB_ratio, RT)) +
geom_pointrange(stat = "summary",
fun.min = function(z) {quantile(z,0.25)},
fun.max = function(z) {quantile(z,0.75)},
fun = median) +
geom_line(color='red',data = predicted2, aes(x=dB_ratio, y=RT_pred)) +
stat_smooth(method='lm', formula = y ~ poly(x,3), size = 1)
summary(RTmodel3)
plot(resid(RTmodel3))
predicted3 <- data.frame(RT_pred = predict(RTmodel3, data_or), dB_ratio=data_or$dB_ratio)
ggplot(data_or) +
geom_pointrange(mapping = aes(dB_ratio, RT),
stat = "summary",
fun.min = function(z) {quantile(z,0.25)},
fun.max = function(z) {quantile(z,0.75)},
fun = median) +
geom_line(color='red',data = predicted3, aes(x=dB_ratio, y=RT_pred))
predicted3
predicted3 <- data.frame(RT_pred = predict(RTmodel3, data_or), dB_ratio=data_or$dB_ratio)
predicted3
ggplot(data_or) +
geom_pointrange(mapping = aes(dB_ratio, RT),
stat = "summary",
fun.min = function(z) {quantile(z,0.25)},
fun.max = function(z) {quantile(z,0.75)},
fun = median) +
geom_line(color='red',data = predicted3, aes(x=dB_ratio, y=RT_pred.Estimate))
pred <- predict(model1, data, type="response")  # predicted scores
plotROC(data$RT, pred)
prop_data <- data %>% dplyr::group_by(participant, dB_ratio) %>%
dplyr::summarise(prop_yanny = mean(resp),
mean_RT = mean(RT),
sd = sd(RT))
pred
ggplot(data = prop_data, mapping = aes(dB_ratio, prop_yanny, color = participant)) +
geom_point() +
geom_line(pred, mapping = aes(group = 1)) +
scale_y_continuous(name = "Prop. 'Yanny'", limits = c(0,1)) +
scale_x_discrete(name = "High/low ratio (dB)") +
theme_classic()
pred <- as.data.frame(p_pred = predict(model1, data, type="response"), dB_ratio = data$dB_ratio)  # predicted scores
pred <- data.frame(p_pred = predict(model1, data, type="response"), dB_ratio = data$dB_ratio)  # predicted scores
ggplot(data = prop_data, mapping = aes(dB_ratio, prop_yanny, color = participant)) +
geom_point() +
geom_line(pred, mapping = aes(dB_ratio, p_pred, group = 1)) +
scale_y_continuous(name = "Prop. 'Yanny'", limits = c(0,1)) +
scale_x_discrete(name = "High/low ratio (dB)") +
theme_classic()
ggplot() +
geom_point(data = prop_data, mapping = aes(dB_ratio, prop_yanny, color = participant)) +
geom_line(pred, mapping = aes(dB_ratio, p_pred, group = 1)) +
scale_y_continuous(name = "Prop. 'Yanny'", limits = c(0,1)) +
scale_x_discrete(name = "High/low ratio (dB)") +
theme_classic()
ggplot() +
geom_point(data = prop_data, mapping = aes(dB_ratio, prop_yanny)) +
geom_line(pred, mapping = aes(dB_ratio, p_pred, group = 1)) +
scale_y_continuous(name = "Prop. 'Yanny'", limits = c(0,1)) +
scale_x_discrete(name = "High/low ratio (dB)") +
theme_classic()
anova(model1, test="Chisq")
model2 <- glm(resp ~ stim_idx + age, family = binomial(link='logit'), data = data)
anova(model1, model2, test="Chisq")
pred
fitted.results <- ifelse(pred > 0.5,1,0)
RTmodel1 <- lm(RT ~ stim_idx, data = data_or)
summary(RTmodel1)
plot(resid(RTmodel1))
predicted <- data.frame(RT_pred = predict(RTmodel1, data_or), dB_ratio=data_or$dB_ratio)
ggplot(data_or) +
geom_pointrange(mapping = aes(dB_ratio, RT),
stat = "summary",
fun.min = function(z) {quantile(z,0.25)},
fun.max = function(z) {quantile(z,0.75)},
fun = median) +
geom_line(color='red',data = predicted, aes(x=dB_ratio, y=RT_pred))
ggplot(data_or, aes(dB_ratio, RT)) +
geom_pointrange(stat = "summary",
fun.min = function(z) {quantile(z,0.25)},
fun.max = function(z) {quantile(z,0.75)},
fun = median) +
geom_line(color='red',data = predicted, aes(x=dB_ratio, y=RT_pred)) +
stat_smooth(method='lm', formula = y ~ x, size = 1)
plot(resid(RTmodel1))
plot(resid(RTmodel2))
hist(resid(RTmodel2))
hist(resid(RTmodel1))
RTmodel2 <- lm(RT ~ poly(stim_idx,2), data = data_or)
hist(resid(RTmodel2))
RTmodel2 <- lm(RT ~ poly(stim_idx,4), data = data_or)
hist(resid(RTmodel2))
RTmodel2 <- lm(RT ~ poly(stim_idx,3), data = data_or)
hist(resid(RTmodel2))
mean(resid(RTmodel2))
anova(RTmodel1, RTmodel2)
anova(RTmodel1, RTmodel3)
anova(RTmodel1, RTmodel2)
anova(RTmodel1, RTmodel2, test = "Chisq")
RTmodel2 <- lm(RT ~ poly(stim_idx,2), data = data_or)
summary(RTmodel2)
hist(resid(RTmodel2))
predicted2 <- data.frame(RT_pred = predict(RTmodel2, data_or), dB_ratio=data_or$dB_ratio)
ggplot(data_or, aes(dB_ratio, RT)) +
geom_pointrange(stat = "summary",
fun.min = function(z) {quantile(z,0.25)},
fun.max = function(z) {quantile(z,0.75)},
fun = median) +
geom_line(color='red',data = predicted2, aes(x=dB_ratio, y=RT_pred)) +
stat_smooth(method='lm', formula = y ~ poly(x,3), size = 1)
RTmodel2 <- lm(RT ~ poly(stim_idx,2), data = data_or)
summary(RTmodel2)
hist(resid(RTmodel2))
predicted2 <- data.frame(RT_pred = predict(RTmodel2, data_or), dB_ratio=data_or$dB_ratio)
ggplot(data_or, aes(dB_ratio, RT)) +
geom_pointrange(stat = "summary",
fun.min = function(z) {quantile(z,0.25)},
fun.max = function(z) {quantile(z,0.75)},
fun = median) +
geom_line(color='red',data = predicted2, aes(x=dB_ratio, y=RT_pred)) +
stat_smooth(method='lm', formula = y ~ poly(x,2), size = 1)
anova(RTmodel1, RTmodel2, test = "Chisq")
RTmodel3 <- glmer(RT ~ stim_idx + (1|participant), data=data_or, family = inverse.gaussian(link = "identity"))
library(lme4)
RTmodel3 <- glmer(RT ~ stim_idx + (1|participant), data=data_or, family = inverse.gaussian(link = "identity"))
summary(RTmodel4)
summary(RTmodel3)
anova(RTmodel1, RTmodel2, RTmodel3, test = "Chisq")
hist(resid(RTmodel3))
predicted3 <- data.frame(RT_pred = predict(RTmodel3, data_or), dB_ratio=data_or$dB_ratio)
predicted3 <- data.frame(RT_pred = predict(RTmodel3, data_or), dB_ratio=data_or$dB_ratio)
ggplot(data_or, aes(dB_ratio, RT)) +
geom_pointrange(stat = "summary",
fun.min = function(z) {quantile(z,0.25)},
fun.max = function(z) {quantile(z,0.75)},
fun = median) +
geom_line(color='red',data = predicted3, aes(x=dB_ratio, y=RT_pred))# +
ggplot(data_or, aes(dB_ratio, RT, colo = particpant)) +
geom_point(stat = "summary", fun = median) +
geom_line(color='red',data = predicted3, aes(x=dB_ratio, y=RT_pred))# +
ggplot(data_or, aes(dB_ratio, RT, color = particpant)) +
geom_point(stat = "summary", fun = median) +
geom_line(color='red',data = predicted3, aes(x=dB_ratio, y=RT_pred))# +
data_or
ggplot(data_or, aes(dB_ratio, RT, color = particpant)) +
geom_point(stat = "summary", fun = median)
data_or
ggplot(data_or, aes(dB_ratio, RT)) +
geom_point(stat = "summary", fun = median)
ggplot(data_or, aes(dB_ratio, RT)) +
geom_point(stat = "summary", fun = median, aes(color = participant)) +
geom_line(color='red',data = predicted3, aes(x=dB_ratio, y=RT_pred))# +
ggplot(data_or, aes(dB_ratio, RT)) +
geom_point(stat = "summary", fun = median, aes(color = participant))
ggplot(data_or, aes(dB_ratio, RT)) +
geom_point(aes(color = participant))
ggplot(data_or, aes(dB_ratio, RT)) +
geom_point(aes(color = as.factor(participant))) +
geom_line(color='red',data = predicted3, aes(x=dB_ratio, y=RT_pred))# +
predicted3 <- data.frame(RT_pred = predict(RTmodel3, data_or), participant = data_or$participant, dB_ratio=data_or$dB_ratio)
ggplot(data_or, aes(dB_ratio, RT)) +
geom_point(aes(color = as.factor(participant))) +
geom_line(color='red',data = predicted3, aes(x=dB_ratio, y=RT_pred))# +
predicted3 <- data.frame(RT_pred = predict(RTmodel3, data_or, type = "response"), participant = data_or$participant, dB_ratio=data_or$dB_ratio)
ggplot(data_or, aes(dB_ratio, RT)) +
geom_point(aes(color = as.factor(participant))) +
geom_line(color='red',data = predicted3, aes(x=dB_ratio, y=RT_pred))# +
install.packages("sjPlot")
library(sjPlot)
plot_model(RTmodel3,type = 'pred')
plot_model(RTmodel3,type = 'pred', terms = "stim_idx")
summary(RTmodel3)
anova(RTmodel1, RTmodel2, RTmodel3, test = "Chisq")
anova(RTmodel1, RTmodel2, test = "Chisq")
rm(list=ls())
2+3
setwd("~/Repos/yanny-laurel-demo/2_analysis")
# set working directory to source file location
data_path = file.path('../data')
results_path = file.path('../3_results')
# the '.' means "working directory"
# the '/' means go down one folder level
# the '../' means go up one folder level
list.files(data_path)
library(tidyverse)
# Helper functions
source('./helper_functions.R')
# first let's check to make sure we're in the right place:
(files <- list.files(data_path, pattern = ".csv"))
# Note that putting () around a command will cause it to print the result directly to the console. If you assign a variable without using (), it will silently perform the assignment, and you'd have to run the variable itself to see its contents in the console. You don't need () if you are just running a command without assigning it to anything.
# now load
data_raw <- data.frame()
# add blocking
for (f in files) {
incoming <- read.csv(file.path(data_path, f))
breaks <- which(!is.na(incoming$block.thisRepN))
bks <- length(breaks)
ns <- c(breaks[1],diff(breaks))-1
cleaned <- incoming[!is.na(incoming$report.response),]
cleaned$block <- rep_block(bks,ns)
data_raw <- rbind(data_raw,cleaned)
}
(files <- list.files(data_path, pattern = ".csv"))
# first let's check to make sure we're in the right place:
(files <- list.files(data_path, pattern = ".csv"))
# Note that putting () around a command will cause it to print the result directly to the console. If you assign a variable without using (), it will silently perform the assignment, and you'd have to run the variable itself to see its contents in the console. You don't need () if you are just running a command without assigning it to anything.
# now load
data_raw <- data.frame()
# add blocking
for (f in files) {
incoming <- read.csv(file.path(data_path, f))
breaks <- which(!is.na(incoming$block.thisRepN))
bks <- length(breaks)
ns <- c(breaks[1],diff(breaks))-1
cleaned <- incoming[!is.na(incoming$report.response),]
cleaned$block <- rep_block(bks,ns)
data_raw <- rbind(data_raw,cleaned)
}
# data_raw
files
# first let's check to make sure we're in the right place:
files <- list.files(data_path, pattern = ".csv")
files
data_raw <- data.frame()
data_raw
# now load
data_raw <- data.frame()
# add blocking
for (f in files) {
incoming <- read.csv(file.path(data_path, f))
breaks <- which(!is.na(incoming$block.thisRepN))
bks <- length(breaks)
ns <- c(breaks[1],diff(breaks))-1
cleaned <- incoming[!is.na(incoming$report.response),]
cleaned$block <- rep_block(bks,ns)
data_raw <- rbind(data_raw,cleaned)
}
data_raw
data_orig <- data_raw %>% dplyr::rename(music_yrs = years.musical.experience, # rename variables
resp = report.response, # whether they responded yanny (2) or laurel (1)
RT = report.rt, # reaction time
trial_rep_n = trials.thisRepN, # whether its the 1st or 2nd time this token
# was played in this block
trial_n = trials.thisN, # occurence in the block
stim_idx = trials.thisIndex, # stimulus identifier
stim = audio) %>% # stimulus filename
# pick which vars to keep, and in which order
dplyr::select(participant, sex, age, music_yrs, # pariticpant variables
block, trial_n, stim, stim_idx, trial_rep_n, # independent variables
resp, RT) %>% # dependent variables
# get data into format we'd like
dplyr::mutate(trial_n = trial_n+1, # rescale to adjust for Python indexing
stim_idx = stim_idx+1,
trial_rep_n = trial_rep_n+1,
resp = round(resp)-1, # convert 1,2 responses to 0,1
RT = RT-0.3) %>% # adjust for trial timing
dplyr::mutate(participant = as.factor(participant), # code as categorical variables
sex = as.factor(sex))
# make sure you have complete data for all observations
nrow(data_orig)
nrow(data_orig %>% na.omit()) # see also dplyr::complete.cases
data <- data_orig %>%
dplyr::mutate(dB_ratio = ordered(stim_idx, labels = c(-60,-48,-36,-24,-12,0,12,24,36,48,60))) # make a copy
# data
#data$participant %>% unique()
write.csv(data,file.path(data_path,"data.csv"))
files
f<- "0001_yanny-laurel_2021-10-22_21h36.41.762.csv"
incoming <- read.csv(file.path(data_path, f))
incoming
f <- "0001_yanny-laurel_2021-10-22_21h36.41.762.csv"
incoming <- read.csv(file.path(data_path, f))
incoming
breaks <- which(!is.na(incoming$block.thisRepN))
bks <- length(breaks)
ns <- c(breaks[1],diff(breaks))-1
# first let's check to make sure we're in the right place:
files <- list.files(data_path, pattern = ".csv")
# Note that putting () around a command will cause it to print the result directly to the console. If you assign a variable without using (), it will silently perform the assignment, and you'd have to run the variable itself to see its contents in the console. You don't need () if you are just running a command without assigning it to anything.
# now load
data_raw <- data.frame()
# add blocking
for (f in files) {
incoming <- read.csv(file.path(data_path, f))
breaks <- which(!is.na(incoming$block.thisRepN))
bks <- length(breaks)
ns <- c(breaks[1],diff(breaks))-1
cleaned <- incoming[!is.na(incoming$`report.response`),]
cleaned$block <- rep_block(bks,ns)
data_raw <- rbind(data_raw,cleaned)
}
f
data_orig <- data_raw %>% dplyr::rename(music_yrs = years.musical.experience, # rename variables
resp = report.response, # whether they responded yanny (2) or laurel (1)
RT = report.rt, # reaction time
trial_rep_n = trials.thisRepN, # whether its the 1st or 2nd time this token
# was played in this block
trial_n = trials.thisN, # occurence in the block
stim_idx = trials.thisIndex, # stimulus identifier
stim = audio) %>% # stimulus filename
# pick which vars to keep, and in which order
dplyr::select(participant, sex, age, music_yrs, # pariticpant variables
block, trial_n, stim, stim_idx, trial_rep_n, # independent variables
resp, RT) %>% # dependent variables
# get data into format we'd like
dplyr::mutate(trial_n = trial_n+1, # rescale to adjust for Python indexing
stim_idx = stim_idx+1,
trial_rep_n = trial_rep_n+1,
resp = round(resp)-1, # convert 1,2 responses to 0,1
RT = RT-0.3) %>% # adjust for trial timing
dplyr::mutate(participant = as.factor(participant), # code as categorical variables
sex = as.factor(sex))
data_orig <- data_raw %>% dplyr::rename(music_yrs = years.musical.experience, # rename variables
resp = report.response, # whether they responded yanny (2) or laurel (1)
RT = report.rt, # reaction time
trial_rep_n = trials.thisRepN, # whether its the 1st or 2nd time this token
# was played in this block
trial_n = trials.thisN, # occurence in the block
stim_idx = trials.thisIndex, # stimulus identifier
stim = audio) %>% # stimulus filename
# pick which vars to keep, and in which order
dplyr::select(participant, sex, age, music_yrs, # pariticpant variables
block, trial_n, stim, stim_idx, trial_rep_n, # independent variables
resp, RT) %>% # dependent variables
# get data into format we'd like
dplyr::mutate(trial_n = trial_n+1, # rescale to adjust for Python indexing
stim_idx = stim_idx+1,
trial_rep_n = trial_rep_n+1,
resp = round(resp)-1, # convert 1,2 responses to 0,1
RT = RT-0.3) %>% # adjust for trial timing
dplyr::mutate(participant = as.factor(participant), # code as categorical variables
sex = as.factor(sex))
# make sure you have complete data for all observations
nrow(data_orig)
nrow(data_orig %>% na.omit()) # see also dplyr::complete.cases
na.omit(data_orig)
data_raw %>% dplyr::rename(music_yrs = years.musical.experience, # rename variables
resp = report.response, # whether they responded yanny (2) or laurel (1)
RT = report.rt, # reaction time
trial_rep_n = trials.thisRepN, # whether its the 1st or 2nd time this token
# was played in this block
trial_n = trials.thisN, # occurence in the block
stim_idx = trials.thisIndex, # stimulus identifier
stim = audio)
data_orig
data <- data_orig %>%
dplyr::mutate(dB_ratio = ordered(stim_idx, labels = c(-60,-48,-36,-24,-12,0,12,24,36,48,60))) # make a copy
data
data
summary(data)
files
hist(data$age)
data$participant %>% unique()
data$age %>% unique()
data %>% dplyr::group_by(participant, age) %>% unique()
data %>% dplyr::group_by(participant, age) %>% unique()
data %>% dplyr::group_by(participant) %>% unique()
data %>% dplyr::group_by(participant) %>% summarise(n = unique(age))
data %>% dplyr::group_by(participant)
data %>% dplyr::group_by(participant) %>% summarise(age = unique(age))
hist(data %>% dplyr::group_by(participant) %>% summarise(age = unique(age)))
age_dat <- data %>% dplyr::group_by(participant) %>% summarise(age = unique(age))
hist(age_dat$age)
plot(data$resp)
hist(data$resp)
prop_data <- data %>% dplyr::group_by(participant, dB_ratio) %>%
dplyr::summarise(prop_yanny = mean(resp),
median_RT = median(RT),
iqr_RT = IQR(RT),
mad_RT = mad(RT))
prop_data
ggplot(data = prop_data, mapping = aes(dB_ratio, prop_yanny, color = participant)) +
geom_point() +
geom_line(mapping = aes(group = participant)) +
scale_y_continuous(name = "Prop. 'Yanny'", limits = c(0,1)) +
scale_x_discrete(name = "High/low ratio (dB)") +
theme_classic()
data_agg <- aggregate(resp ~ dB_ratio, data=data, FUN=mean)
data_agg
aggregate(prop_yanny~dB_ratio,data=prop_data, FUN=mean)
group_means <- aggregate(prop_yanny~dB_ratio,data=prop_data, FUN=mean)
group_means <- aggregate(prop_yanny~dB_ratio,data=prop_data, FUN=mean)
ggplot(data = prop_data, mapping = aes(dB_ratio, prop_yanny, color = participant)) +
geom_point() +
geom_line(mapping = aes(group = participant)) +
geom_line(data = group_means, aes(dB_ratio, prop_yanny, group = 1), color = "black", size = 2) +
scale_y_continuous(name = "Prop. 'Yanny'", limits = c(0,1)) +
scale_x_discrete(name = "High/low ratio (dB)") +
theme_classic()
prop_data_demog <- data %>% aggregate(prop_yanny~sex, FUN=mean)
prop_data_demog <- data %>% aggregate(prop_yanny~sex, data = ., FUN=mean)
prop_data_demog <- data %>% aggregate(prop_yanny~sex, FUN=mean)
prop_data_demog <- aggregate(prop_yanny~sex, data = data, FUN=mean)
data
prop_data_demog <- aggregate(resp ~ sex, data = data, FUN=mean)
prop_data_demog
prop_data_demo2 <- data %>% dplyr::group_by(sex, dB_ratio) %>%
dplyr::summarise(prop_yanny = mean(resp),
median_RT = median(RT),
iqr_RT = IQR(RT),
mad_RT = mad(RT))
prop_data_demo2
prop_data_demo2 <- data %>% dplyr::group_by(sex, dB_ratio) %>%
dplyr::summarise(prop_yanny = mean(resp),
sd = sd(resp),
median_RT = median(RT),
iqr_RT = IQR(RT),
mad_RT = mad(RT))
prop_data_demo2
? glm
data
model1 <- glm(resp ~ stim_idx, family = binomial(link='logit'), data = data)
summary(model1)
model1 <- glm(resp ~ stim_idx, family = binomial(link='identity'), data = data)
model1 <- glm(resp ~ stim_idx, family = binomial(link='logit'), data = data)
summary(model1)
coef(model1)
exp
# odds ratio
exp(coef(model1))
exp( cbind(odd_ratio = coef(model1), confint(model1,level = .95)) )
pred <- data.frame(p_pred = predict(model1, data, type="response"),
dB_ratio = data$dB_ratio)  # predicted scores
ggplot() +
geom_point(data = prop_data, mapping = aes(dB_ratio, prop_yanny)) +
geom_line(pred, mapping = aes(dB_ratio, p_pred, group = 1)) +
scale_y_continuous(name = "Prop. 'Yanny'", limits = c(0,1)) +
scale_x_discrete(name = "High/low ratio (dB)") +
theme_classic()
data
model2 <- glm(resp ~ stim_idx + age + sex + music_yrs, family = binomial(link='logit'), data = data)
summary(model2)
anova(model2, test = "Chisq")
anova(model1, model2, test="Chisq")
model3 <- glm(resp ~ stim_idx + age + music_yrs, family = binomial(link='logit'), data = data)
summary(model3)
summary(model2)
anova(model3, test = "Chisq")
anova(model1, model2, model3, test="Chisq")
pred <- data.frame(p_pred = predict(model3, data, type="response"),
dB_ratio = data$dB_ratio)  # predicted scores
ggplot() +
geom_point(data = prop_data, mapping = aes(dB_ratio, prop_yanny)) +
geom_line(pred, mapping = aes(dB_ratio, p_pred, group = 1)) +
scale_y_continuous(name = "Prop. 'Yanny'", limits = c(0,1)) +
scale_x_discrete(name = "High/low ratio (dB)") +
theme_classic()
pred
pred <- data.frame(p_pred = predict(model3, data, type="response"),
dB_ratio = data$dB_ratio)  # predicted scores
ggplot() +
geom_point(data = prop_data, mapping = aes(dB_ratio, prop_yanny)) +
geom_line(pred, mapping = aes(dB_ratio, p_pred, group = 1)) +
scale_y_continuous(name = "Prop. 'Yanny'", limits = c(0,1)) +
scale_x_discrete(name = "High/low ratio (dB)") +
theme_classic()
pred <- data.frame(p_pred = predict(model2, data, type="response"),
dB_ratio = data$dB_ratio)  # predicted scores
ggplot() +
geom_point(data = prop_data, mapping = aes(dB_ratio, prop_yanny)) +
geom_line(pred, mapping = aes(dB_ratio, p_pred, group = 1)) +
scale_y_continuous(name = "Prop. 'Yanny'", limits = c(0,1)) +
scale_x_discrete(name = "High/low ratio (dB)") +
theme_classic()
model4 <- glm(resp ~ stim_idx + age, family = binomial(link='logit'), data = data)
summary(model4)
anova(model4, test = "Chisq")
pred <- data.frame(p_pred = predict(model4, data, type="response"),
dB_ratio = data$dB_ratio)  # predicted scores
ggplot() +
geom_point(data = prop_data, mapping = aes(dB_ratio, prop_yanny)) +
geom_line(pred, mapping = aes(dB_ratio, p_pred, group = 1)) +
scale_y_continuous(name = "Prop. 'Yanny'", limits = c(0,1)) +
scale_x_discrete(name = "High/low ratio (dB)") +
theme_classic()
pred <- data.frame(p_pred = predict(model1, data, type="response"),
dB_ratio = data$dB_ratio)  # predicted scores
pred
pred <- data.frame(p_pred = predict(model4, data, type="response"),
dB_ratio = data$dB_ratio)  # predicted scores
pred
pred <- data.frame(p_pred = predict(model4, data, type="response"),
dB_ratio = data$dB_ratio,
age = data$age)  # predicted scores
ggplot() +
geom_point(data = prop_data, mapping = aes(dB_ratio, prop_yanny)) +
geom_line(pred, mapping = aes(dB_ratio, p_pred, group = 1)) +
scale_y_continuous(name = "Prop. 'Yanny'", limits = c(0,1)) +
scale_x_discrete(name = "High/low ratio (dB)") +
theme_classic()
pred
ggplot() +
geom_point(data = prop_data, mapping = aes(dB_ratio, prop_yanny, color = age))
ggplot() +
geom_point(data = data, mapping = aes(dB_ratio, resp, color = age))
ggplot() +
geom_point(data = data, mapping = aes(dB_ratio, prop_yanny)) +
facet_grid(. ~ sex) +
#geom_line(pred, mapping = aes(dB_ratio, p_pred, group = 1)) +
scale_y_continuous(name = "Prop. 'Yanny'", limits = c(0,1)) +
scale_x_discrete(name = "High/low ratio (dB)") +
theme_classic()
ggplot() +
geom_point(data = data, mapping = aes(dB_ratio, resp)) +
facet_grid(. ~ sex) +
#geom_line(pred, mapping = aes(dB_ratio, p_pred, group = 1)) +
scale_y_continuous(name = "Prop. 'Yanny'", limits = c(0,1)) +
scale_x_discrete(name = "High/low ratio (dB)") +
theme_classic()
