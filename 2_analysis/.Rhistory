curve(post$a[i] + post$b[i]*(log(x)-xbar), col=col.alpha("black",0.3),add = TRUE)
d$log_weight <- log(d$weight) # CORRECTION
xbar <- mean(d$log_weight) # CORRECTION
logw_seq <- seq(1,5,length.out=30)
pred_h <- sim(m.h2, data=list(log_weight=logw_seq))
logw_seq
pred_h <- sim(m.h2, data=list(log_weight=logw_seq))
m.h2
xbar <- mean(d$log_weight) # CORRECTION
m.h2 <- quap(
alist(
height ~ dnorm(mu, sigma),
#  mu <- a + b * (log(weight) - xbar),
mu <- a + b * (log_weight - xbar),
a ~ dnorm(178,20),
b ~ dlnorm(0,1),
sigma ~ dunif(0,50)
), data = d
)
logw_seq <- seq(1,5,length.out=30)
pred_h <- sim(m.h2, data=list(log_weight=logw_seq))
pred_h
logw_seq <- seq(1,5,length.out=30)
pred_h <- sim(m.h2, data=list(log_weight=logw_seq))
mu <- apply(pred_h, 2, mean)
CI <- apply(pred_h, 2, PI)
plot(height ~ weight, data = d, col = rangi2)
lines(logw_seq,mu,lwd=3)
shade(CI,logw_seq)
plot(height ~ log_weight, data = d, col = rangi2)
lines(logw_seq,mu,lwd=3)
shade(CI,logw_seq)
plot(log_weight ~ height, data = d, col = rangi2)
lines(logw_seq,mu,lwd=3)
shade(CI,logw_seq)
plot(height ~ weight, data = d, col = rangi2)
lines(exp(logw_seq),mu,lwd=3)
shade(CI,exp(logw_seq))
CI
plot(height ~ weight, data = d, col = rangi2)
lines(exp(logw_seq),mu,lwd=3)
shade(CI,exp(logw_seq))
CI <- apply(pred_h, 2, PI, 0.89)
plot(height ~ weight, data = d, col = rangi2)
lines(exp(logw_seq),mu,lwd=3)
shade(CI,exp(logw_seq))
plot(height ~ log_weight, data = d, col = rangi2)
lines(logw_seq,mu,lwd=3)
shade(CI,logw_seq)
plot(height ~ weight, data = d, col = rangi2)
lines(exp(logw_seq),mu,lwd=3)
shade(CI,exp(logw_seq))
knitr::opts_chunk$set(echo = FALSE)
calls.15 <- read.csv(file.path('./../../results','all_call_data.csv'))
1.20^20
20(1.20^20)
20*(1.20^20)
20*1.20^20
knitr::opts_chunk$set(echo = FALSE)
rm(list=ls())
Hz <- c(4,8,16,24,40,56,72,88)
steps <- diff(Hz)
steps
periods <- 1/Hz
periods
time_for_ea <- (60)/length(periods)
time_for_ea
sum(periods) # less than a second to go through 1 cycle of each
time_for_ea # 7.5 mins for each
sum(round(periods,3)) # less than a second to go through 1 cycle of each
time_for_ea # 7.5 mins for each
time_for_ea # 7.5 mins for each
sum((time_for_ea*60)/round(periods,3)) # n cycles in s
round(periods,3) %% time_for_ea*60
round(periods,3) %% time_for_ea
time_for_es / round(periods,3)
time_for_ea / round(periods,3)
round(periods,3)
time_for_ea
time_for_ea / round(periods,3)
floor(time_for_ea / round(periods,3))
time_for_ea
round(periods,3)
time_for_ea
round(periods,3)
time_for_ea
floor(time_for_ea / round(periods,3))
round(periods,3) %% time_for_ea
time_for_ea
round(periods,3) %% time_for_ea
time_for_ea / round(periods,3)
? %%
%%
time_for_ea %% round(periods,3)
n_cycle_fits <- floor(time_for_ea / round(periods,3)) # n full cycles that will fit in 7.5 mins for each mod rate
n_cycle_fits
n_cycle_fits
round(periods,3)
n_cycle_fits * round(periods,3)
dur_for_ea <- n_cycle_fits * round(periods,3))
dur_for_ea <- n_cycle_fits * round(periods,3)
sum(dur_for_ea)
sum((time_for_ea*60)/round(periods,3)) # n cycles in s
trace("seewave::synth")
? noisew
??noisew
library(seewave)
trace("noisew")
trace("noisew",edit = TRUE)
dur_for_ea
periods
Hz
# Wrangle & plot
library(tidyverse)
library(seewave)
options(dplyr.summarise.inform=FALSE)
library(viridis)
library(patchwork)
# Stats
library(caret)
# Functions
funpath <- file.path('../','1_preprocessing/call_detection_analysis_R/functions')
funs <- list.files(funpath, pattern = ".R")
funsin <- sapply(file.path(funpath,funs), source)
# Paths
data_path <- c('./../2_data')
results_path <- c('./../4_results')
# Labels
gr_labels = c(`1` = "group 1", `2` = "group 2", `3` = "group 3", `4` = "group 4")
dy_labels = c(`1` = "day 1",`2` = "day 2",`3` = "day 3",`4` = "day 4",`5` = "day 5")
o1_labels = c(`1` = "silence", `2` = "full mask (10-96 kHz)", `3` = "half mask (50-96 kHz)")
o2_labels = c(`1` = "silence", `2` = "half mask (50-96 kHz)", `3` = "full mask (10-96 kHz)")
md_labels = c(`1` = "8 Hz", `2` = "15 Hz")
calls <- read.csv(file.path(data_path,'exp_1-call_data.csv')) %>%
mutate(order = if_else(group < 3 , 1, 2), .after = 4) %>%
mutate(group = factor(group),
session = factor(session),
part = factor(part)) %>%
mutate(condition = case_when(part == 1 ~ "silence",
part == 2 & order == 1 ~ "full mask (10-96 kHz)",
part == 3 & order == 1 ~ "half mask (50-96 kHz)",
part == 2 & order == 2 ~ "half mask (50-96 kHz)",
part == 3 & order == 2 ~ "full mask (10-96 kHz)",
TRUE ~ as.character(NA)), .after = 5) %>%
mutate(condition = factor(condition, levels = c("silence","full mask (10-96 kHz)","half mask (50-96 kHz)")))
#knitr::opts_chunk$set(echo = FALSE)
#rm(list=ls())
vars <- list("group","session")
call.counts <- get_call_density_ext(calls, vars)
call.summary <- call.counts  %>% group_by(modulation, condition, period) %>% # averaged over groups and sessions (days)
summarise(period = period,
n_calls = n_calls,
density = density,
n_calls_sum = sum(n_calls),
density_mu = mean(density),
n_calls_mu = mean(n_calls),
density_sd = sd(density),
n_calls_sd = sd(n_calls))
set.seed(42)
calls.without.outliers <- call.counts %>% dplyr::filter(!(modulation == 15 & period == 0.066 )) %>%
mutate(condition = case_when(condition == 'silence' ~ 1,
condition == 'full mask (10-96 kHz)' ~ 2,
condition == 'half mask (50-96 kHz)' ~ 3)) %>%
sapply(.,as.numeric) %>% as.data.frame()
training.samples <- calls.without.outliers$modulation %>% caret::createDataPartition(p = 0.8, list = FALSE)
train.data  <- calls.without.outliers[training.samples, ]
test.data <- calls.without.outliers[-training.samples, ]
train.data
ggplot(train.data, aes(period, n_calls, color = as.factor(condition))) +
geom_point() +
geom_smooth(method = lm, formula = y ~ poly(x,2, raw = TRUE)) + # already split by condition and modulation
scale_x_continuous(name = "time (ms)", n.breaks = 6) +
scale_y_continuous(name = "number of calls", n.breaks = 10) +
scale_color_viridis(discrete = TRUE, option = "D") +
facet_wrap(. ~ modulation, scales = "free") +
theme_bw() +
theme(strip.text = element_text(colour = 'black'),
strip.background = element_rect(colour="black",
fill="white"),
legend.title = element_text("condition") ) +
ggtitle("poly regression - training data")
train.data
ggplot(train.data, aes(period, n_calls, color = as.factor(condition))) +
geom_point() +
geom_smooth(method = lm, formula = y ~ poly(x,2, raw = TRUE)) + # already split by condition and modulation
scale_x_continuous(name = "time (ms)", n.breaks = 6) +
scale_y_continuous(name = "number of calls", n.breaks = 10) +
scale_color_viridis(discrete = TRUE, option = "D") +
facet_wrap(. ~ modulation, scales = "free") +
theme_bw() +
theme(strip.text = element_text(colour = 'black'),
strip.background = element_rect(colour="black",
fill="white"),
legend.title = element_text("condition") ) +
ggtitle("poly regression - training data")
#knitr::opts_chunk$set(echo = FALSE)
#rm(list=ls())
train.data %>% group_by(modulation, condition, period) %>% # averaged over groups and sessions (days)
summarise(period = period,
n_calls = n_calls,
density = density,
n_calls_sum = sum(n_calls),
density_mu = mean(density),
n_calls_mu = mean(n_calls),
density_sd = sd(density),
n_calls_sd = sd(n_calls))
#knitr::opts_chunk$set(echo = FALSE)
#rm(list=ls())
train.data %>% group_by(modulation, condition, period) %>% # averaged over groups and sessions (days)
summarise(period = period,
n_calls = n_calls,
density = density,
n_calls_sum = sum(n_calls),
density_mu = mean(density),
n_calls_mu = mean(n_calls),
density_sd = sd(density),
n_calls_sd = sd(n_calls)) %>%
ggplot(aes(period, n_calls_mu, color = as.factor(condition))) +
geom_point() +
geom_smooth(method = lm, formula = y ~ poly(x,2, raw = TRUE)) + # already split by condition and modulation
scale_x_continuous(name = "time (ms)", n.breaks = 6) +
scale_y_continuous(name = "number of calls", n.breaks = 10) +
scale_color_viridis(discrete = TRUE, option = "D") +
facet_wrap(. ~ modulation, scales = "free") +
theme_bw() +
theme(strip.text = element_text(colour = 'black'),
strip.background = element_rect(colour="black",
fill="white"),
legend.title = element_text("condition") ) +
ggtitle("poly regression - training data")
#knitr::opts_chunk$set(echo = FALSE)
#rm(list=ls())
train.data %>% group_by(modulation, condition, period) %>% # averaged over groups and sessions (days)
summarise(period = period,
n_calls = n_calls,
density = density,
n_calls_sum = sum(n_calls),
density_mu = mean(density),
n_calls_mu = mean(n_calls),
density_sd = sd(density),
n_calls_sd = sd(n_calls)) %>%
ggplot(aes(period, n_calls_mu, color = as.factor(condition))) +
geom_point() +
geom_smooth(method = lm, formula = y ~ poly(x,2, raw = TRUE)) + # already split by condition and modulation
scale_x_continuous(name = "time (ms)", n.breaks = 6) +
scale_y_continuous(name = "number of calls", n.breaks = 10) +
scale_color_viridis(discrete = TRUE, option = "D") +
facet_wrap(. ~ modulation, scales = "free") +
theme_bw() +
theme(strip.text = element_text(colour = 'black'),
strip.background = element_rect(colour="black",
fill="white"),
legend.title = "condition" ) +
ggtitle("poly regression - training data")
#knitr::opts_chunk$set(echo = FALSE)
#rm(list=ls())
train.data %>% group_by(modulation, condition, period) %>% # averaged over groups and sessions (days)
summarise(period = period,
n_calls = n_calls,
density = density,
n_calls_sum = sum(n_calls),
density_mu = mean(density),
n_calls_mu = mean(n_calls),
density_sd = sd(density),
n_calls_sd = sd(n_calls)) %>%
ggplot(aes(period, n_calls_mu, color = as.factor(condition))) +
geom_point() +
geom_smooth(method = lm, formula = y ~ poly(x,2, raw = TRUE)) + # already split by condition and modulation
scale_x_continuous(name = "time (ms)", n.breaks = 6) +
scale_y_continuous(name = "number of calls", n.breaks = 10) +
scale_color_viridis(discrete = TRUE, option = "D") +
facet_wrap(. ~ modulation, scales = "free") +
theme_bw() +
theme(strip.text = element_text(colour = 'black'),
strip.background = element_rect(colour="black",
fill="white")) +
ggtitle("poly regression - training data")
#knitr::opts_chunk$set(echo = FALSE)
#rm(list=ls())
train.data %>% group_by(modulation, condition, period) %>% # averaged over groups and sessions (days)
summarise(period = period,
n_calls = n_calls,
density = density,
n_calls_sum = sum(n_calls),
density_mu = mean(density),
n_calls_mu = mean(n_calls),
density_sd = sd(density),
n_calls_sd = sd(n_calls)) %>%
ggplot(aes(period, n_calls_mu, color = as.factor(condition))) +
geom_point() +
geom_smooth(method = lm, formula = y ~ poly(x,2, raw = TRUE)) + # already split by condition and modulation
scale_x_continuous(name = "time (ms)", n.breaks = 6) +
scale_y_continuous(name = "number of calls", n.breaks = 10) +
scale_color_viridis(discrete = TRUE, option = "D", name = "condition") +
facet_wrap(. ~ modulation, scales = "free") +
theme_bw() +
theme(strip.text = element_text(colour = 'black'),
strip.background = element_rect(colour="black",
fill="white")) +
ggtitle("poly regression - training data")
#knitr::opts_chunk$set(echo = FALSE)
#rm(list=ls())
library(lme4)
#knitr::opts_chunk$set(echo = FALSE)
#rm(list=ls())
train.data
#knitr::opts_chunk$set(echo = FALSE)
#rm(list=ls())
polyme1 <- lmer(n_calls ~ polym(period, modulation, 2, raw = FALSE) + (1 + polym(period, modulation, 2, raw = FALSE)|group),
+ (1 + session|group), data = train.data)
#knitr::opts_chunk$set(echo = FALSE)
#rm(list=ls())
polyme1 <- lmer(n_calls ~ polym(period, modulation, 2, raw = FALSE) + (1 + polym(period, modulation, 2, raw = FALSE)|group),
+ (1 + session|group), data = train.data)
#knitr::opts_chunk$set(echo = FALSE)
#rm(list=ls())
polyme1 <- lmer(n_calls ~ polym(period, modulation, 2, raw = FALSE) + (1 + session|group), data = train.data)
train.data
polyme1 <- lmer(n_calls ~ polym(period, modulation, 2, raw = FALSE) + (1 + session|group), data = train.data)
train.data
polyme1 <- lmer(n_calls ~ polym(period, modulation, 2, raw = FALSE) + (1 + session|group), data = train.data)
#knitr::opts_chunk$set(echo = FALSE)
#rm(list=ls())
polyme1 <- lmer(n_calls ~ poly(period, 2, raw = FALSE)*modulation + (1 + session|group) + (1 + poly(period, 2, raw = FALSE)|group), data = train.data)
#knitr::opts_chunk$set(echo = FALSE)
#rm(list=ls())
library(lme4)
polyme1 <- lmer(n_calls ~ poly(period, 2, raw = FALSE)*modulation + (1 + poly(period, 2, raw = FALSE)*session|group),
data = train.data)
summary(polyme1)
library(dynaSpec)
library(viridis)
library(tuneR)
library(seewave)
dat = "H:/2_ColonyJamRove_preprocessed_data/group_1/session_4/part_2/rec2021-08-26_17-34-33_04_trimmed_02_8Hz_seg.wav"
wav = tuneR::readWave(dat)
mp4<-scrolling_spectro(wave = wav, wl = 300, ovlp = 90,
fps = 50, t.display = 1.5, collevels = seq(-40, 0, 5),
pal = reverse.heat.colors, grid = FALSE, flim = c(10, 120),
res = 120)
library(dynaSpec)
library(viridis)
library(tuneR)
library(seewave)
dat = "H:/2_ColonyJamRove_preprocessed_data/group_1/session_4/part_2/rec2021-08-26_17-34-33_04_trimmed_02_8Hz_seg.wav"
wav = tuneR::readWave(dat)
mp4<-scrolling_spectro(wave = wav, wl = 512, ovlp = 50,
fps = 50, t.display = 1.5, collevels = seq(-50, 0.5, 5),
pal = viridis, grid = FALSE, flim = c(10, 120),
res = 120, loop = 3, speed = 0.3)
mp4<-scrolling_spectro(wave = wav, wl = 512, ovlp = 50,
fps = 50, t.display = 1.5, collevels = seq(-50, 0.5, 0),
pal = temp.colors, grid = FALSE, flim = c(10, 120),
res = 120, loop = 3, speed = 0.1)
mp4<-scrolling_spectro(wave = wav, wl = 512, ovlp = 50,
fps = 50, t.display = 1.5, collevels = seq(-50, 0.5, 0),
pal = temp.colors, grid = FALSE, flim = c(10, 120),
res = 120, loop = 3, speed = 0.1)
wav
wav@stereo
wav@pcm
wav@bit
wav@duration
wav@left/wav@samp.rate
length(wav@left)/wav@samp.rate
floor(length(wav@left)/wav@samp.rate,digits=2)
floor(length(wav@left)/wav@samp.rate)
mp4<-scrolling_spectro(wave = wav,
wl = 512, ovlp = 50,
fps = 50,
t.display = floor(length(wav@left)/wav@samp.rate),
collevels = seq(-50, 0.5, 0),
pal = temp.colors,
grid = FALSE,
flim = c(10, 120),
res = 120,
loop = 3,
fix.time = FALSE,
osc = TRUE,
speed = 0.1)
mp4<-scrolling_spectro(wave = wav,
wl = 512, ovlp = 50,
fps = 50,
t.display = floor(length(wav@left)/wav@samp.rate),
collevels = seq(-50, 0.5, 0),
pal = temp.colors,
grid = FALSE,
flim = c(10, 120),
res = 120,
loop = 1,
fix.time = FALSE,
osc = TRUE,
speed = 0.1)
mp4<-scrolling_spectro(wave = wav,
wl = 512, ovlp = 50,
fps = 50,
t.display = floor(length(wav@left)/wav@samp.rate),
collevels = seq(-50, 0, 0.5),
pal = temp.colors,
grid = FALSE,
flim = c(10, 120),
res = 120,
loop = 1,
fix.time = FALSE,
osc = TRUE,
speed = 0.1)
datmp3 <- tuneR::readMP3(dat)  ## MP3 file in working directory
library(dynaSpec)
library(viridis)
library(tuneR)
library(seewave)
dat = "C:\Users\Ava Kiai\Desktop\ambiguous9.mp3"
datmp3 <- tuneR::readMP3(dat)
dat
library(dynaSpec)
library(viridis)
library(tuneR)
library(seewave)
dat = "C:\Users\Ava Kiai\Desktop\ambiguous9.mp3"
dat = "C:/Users/Ava Kiai/Desktop/ambiguous9.mp3"
datmp3 <- tuneR::readMP3(dat)  ## MP3 file in working directory
writeWave(datmp3,"ambiguous9.wav",extensible=FALSE)
dat = "C:/Users/Ava Kiai/Desktop/ambiguous9.wav"
dat
wav = tuneR::readWave(dat)
writeWave(datmp3,"C:/Users/Ava Kiai/Desktop/ambiguous9.wav",extensible=FALSE)
dat = "C:/Users/Ava Kiai/Desktop/ambiguous9.wav"
wav = tuneR::readWave(dat)
wav
mp4<-scrolling_spectro(wave = wav,
wl = 512, ovlp = 50,
fps = 50,
t.display = floor(length(wav@left)/wav@samp.rate),
collevels = seq(-50, 0, 0.5),
pal = temp.colors,
grid = FALSE,
flim = c(10, 120),
res = 120,
loop = 1,
fix.time = FALSE,
osc = TRUE,
speed = 0.1)
mp4
mp4<-scrolling_spectro(wave = wav,
wl = 512, ovlp = 50,
fps = 50,
t.display = floor(length(wav@left)/wav@samp.rate),
collevels = seq(-50, 0, 0.5),
pal = temp.colors,
grid = FALSE,
flim = c(10, 120),
res = 120,
loop = 1,
fix.time = FALSE,
osc = TRUE,
speed = 0.1)
mp4<-scrolling_spectro(wave = wav,
wl = 512, ovlp = 50,
fps = 50,
t.display = floor(length(wav@left)/wav@samp.rate),
collevels = seq(-50, 0, 0.5),
pal = temp.colors,
grid = FALSE,
#flim = c(10, 120),
res = 120,
loop = 1,
fix.time = FALSE,
speed = 0.1)
spec(wav)
spec(wav,wav@samp.rate)
wav@left
datmp3
spec(datmp3)
spec(datmp3)
spectro(wav, f=wav@samp.rate, ovlp=50, zp=16, collevels=seq(-40,0,0.5))
spectro(wav, f=wav@samp.rate, ovlp=50, zp=16, collevels=seq(-40,0,0.5),tlim=c(0,5))
spectro(wav, f=wav@samp.rate, ovlp=50, zp=16, collevels=seq(-40,0,0.5),tlim=c(0,5))
spectro(wav, f=wav@samp.rate, ovlp=50, zp=16, collevels=seq(-40,0,0.5),tlim=c(0,5))
data(tico)
spectro(tico, f=22050, ovlp=50, zp=16, collevels=seq(-40,0,0.5))
spectro(tico, f=22050, ovlp=50, zp=16, collevels=seq(-40,0,0.5))
tico
spectro(wav, f=wav@samp.rate, ovlp=50, zp=16, collevels=seq(-40,0,0.5),tlim=c(0,5))
library(seewave)
spectro(tico, f=22050, ovlp=50, zp=16, collevels=seq(-40,0,0.5))
library(dynaSpec)
library(viridis)
library(tuneR)
library(seewave)
# dat = "C:/Users/Ava Kiai/Desktop/ambiguous9.mp3"
#
# datmp3 <- tuneR::readMP3(dat)  ## MP3 file in working directory
# writeWave(datmp3,"C:/Users/Ava Kiai/Desktop/ambiguous9.wav",extensible=FALSE)
dat = "C:/Users/Ava Kiai/Desktop/ambiguous9.wav"
wav = tuneR::readWave(dat)
spectro(wav, f=wav@samp.rate, ovlp=50, zp=16, collevels=seq(-40,0,0.5),tlim=c(0,5))
s<-spectro(wav, f=wav@samp.rate, ovlp=50, zp=16, collevels=seq(-40,0,0.5),tlim=c(0,5))
v <- ggspectro(wav, ovlp=50)
vv + scale_fill_continuous(name="Amplitude\n(dB)\n", limits=c(-30,0), na.value="transparent")
v
seewave::spectro(wav, f=wav@samp.rate, ovlp=50, zp=16, collevels=seq(-40,0,0.5),tlim=c(0,2))
seewave::spectro(wav, f=wav@samp.rate, ovlp=50, zp=16, collevels=seq(-40,0,0.5),tlim=c(0,2),flim=c(0,5))
seewave::spectro(wav, f=wav@samp.rate, ovlp=50, zp=16, collevels=seq(-40,0,0.5),tlim=c(0,2),flim=c(0,10))
setwd("D:/GitRepos/yanny-laurel-demo/2_analysis")
data_path = file.path('../data')
results_path = file.path('../3_results')
list.files(data_path)
# first let's check to make sure we're in the right place:
(file <- list.files(data_path))
# now load
read.csv(file.path(data_path,file))
read.csv(file.path(data_path,file),nrows = 12)
